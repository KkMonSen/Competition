import matplotlib.pyplot as plt
import numpy as np
import time
import math

start_time = 0

# keep ap>=1 and aI>=0.5
# R0=1.0; a=0.3; k=1.5; d=0.5; ap=2.0; aI=2.5;
# R0=3.0; a=1.0; k=1.2; d=0.5; ap=2.0; aI=3.0;
# R0=3.0; a=1.0; k=1.2; d=0.5; ap=1.0; aI=1.0;
R0 = 3.0
a = 1.0
k = 1.0
d = 0.0
ap = 2.0
aI = 2.0

nP = 2.0
nI = 2.0

mu0 = 4.0e-8 * math.pi
p0 = 0.01e6
I0 = 1e6

nR = 51
nZ = 51
Rlow = R0 - a
Rup = R0 + a
Zlow = 0
Zup = k * a

rr = np.linspace(Rlow, Rup, nR)
zz = np.linspace(Zlow, Zup, nZ)
dR = rr[1] - rr[0]
dZ = zz[1] - zz[0]

R, Z = np.meshgrid(rr, zz)
dR2 = dR * dR
dZ2 = dZ * dZ

psi_n = np.arange(0, 1.02, 0.02)
p = p0 * (1 - psi_n**nP)**ap
I = I0 * (1 - psi_n**nI)**aI

fig = plt.figure()
figure =plt.subplots_adjust(left=0.2, bottom=0.2, right=0.9, top=0.8, wspace=0.7, hspace=0.8)
ax1 = fig.add_subplot(231)
ax1.plot(psi_n, p, linewidth=2)
ax1.set_xlabel(r'$\psi_n$')
ax1.set_ylabel('p')
ax1.set_title(f'p=p_0(1-$\psi_n^{{{nP}}}$)$^{{{ap}}}$')

ax2 = fig.add_subplot(232)
ax2.plot(psi_n, I, linewidth=2)
ax2.set_xlabel(r'$\psi_n$')
ax2.set_ylabel('I')
ax2.set_title(f'I=I_0(1-$\psi_n^{{{nI}}}$)$^{{{aI}}}$')

ax3 = fig.add_subplot(233)
#绘制一张由 rr 和 zz 向量定义的二维网格图，其中 rr 和 zz 分别表示 x 和 y 方向上的坐标值
ax3.plot(np.tile(rr, (len(zz), 1)), np.tile(zz[:, np.newaxis], (1, len(rr))), 'b')
ax3.plot(np.tile(rr[:, np.newaxis], (1, len(zz))), np.tile(zz, (len(rr), 1)), 'b')

the = np.linspace(0, np.pi, 201)
Rb = R0 + a * np.cos(the + d * np.sin(the))
Zb = k * a * np.sin(the)
Rbg = rr
Zbg = np.interp(Rbg, Rb, Zb)
jend = np.floor((Zbg - Zlow) / dZ) + 1
Zbg = Zlow + (jend - 1) * dZ
ax3.plot(Rb, Zb, 'r+', linewidth=2)
ax3.plot(Rbg, Zbg, 'r+', linewidth=2)

the = np.linspace(0, np.pi/2, 51)
Rb = R0 + a * np.cos(the + d * np.sin(the))
Zb = k * a * np.sin(the)
Zbg = zz
Rbg = np.interp(Zbg, Zb, Rb)
iend = np.floor((Rbg-Rlow)/dR)+1
Rbg = Rlow + (iend-1) * dR
ax3.plot(Rbg, Zbg, 'gx', linewidth=2)

eps = 1e-10
the = np.arange(np.pi/2-eps, np.pi+eps, np.pi/100)
Rb = R0 + a * np.cos(the + d * np.sin(the))
Zb = k * a * np.sin(the)
Zbg = zz
Rbg= np.interp(Zbg, Zb, Rb)
#三次样条插值待议 Rbg = np.interp(Zbg, Zb, Rb, kind='cubic')
istart = np.ceil((Rbg - Rlow) / dR) + 1
istart[istart <= 1] = 2
Rbg = Rlow + (istart - 1) * dR
ax3.plot(Rbg, Zbg, 'gx', linewidth=2)
ax3.set_xlabel('R')
ax3.set_ylabel('Z')
ax3.axis('equal')
ax3.axis('tight')
ax3.set_title('grid')

##main
psib = 0.0
psi0 = -10.0
psi0n = psi0 + 1

ind = np.where((np.square(R-R0) + np.square(Z/k)) < a**2/4)
psi = np.zeros((nZ, nR)) + psib
psi[ind] = psi0 * np.exp(-(((R[ind]-R0)/a)**2 + (Z[ind]/(k*a))**2) * 5)

itr = 0

while itr <= 40 and abs(psi0n-psi0) > 1e-3:
    psi0n = psi0
    nt = 1
    psim1 = np.max(np.abs(psi))
    psim2 = psim1 + 1
    while nt <= 1000 and abs(psim1-psim2)/psim1 > 1e-3:
        psim1 = psim2
        psi_bar = (psi - psi0)/(psib - psi0)
        S = (mu0 * R ** 2 * p0 * ap * nP * psi_bar ** (nP-1) * (1 - psi_bar ** nP) ** (ap-1) \
             +(mu0 / (2 * math.pi * I0)) ** 2 * aI * nI * psi_bar ** (nI-1) * (1 - psi_bar ** nI) ** (2 * aI - 1)) / (psib - psi0)
        for i in range(1, nR-1):
            for j in range(1, int(jend[i])-1):
                if i >= istart[j]-1 and i <= iend[j]-1:
                    psi[j,i] = ((psi[j,i-1]+psi[j,i+1])/dR2\
                                + (psi[j-1,i]+psi[j+1,i])/dZ2\
                                + (psi[j,i-1]-psi[j,i+1])/(2*dR)/R[j,i]\
                                - S[j,i])/(2/dR2+2/dZ2)
        for i in range(nR):
            psi[0,i] = psi[1,i]
            psi[nZ-1,i] = psi[nZ-2,i]

        nt += 1
        psim2 = np.max(np.abs(psi))

    psi0 = np.min(psi)
    itr += 1

psi = psi - psi0
psib = psib - psi0
indm = np.where(psi == 0)
Rm = np.min(R[indm])
Zm = np.min(Z[indm])

ax4 = fig.add_subplot(234)
cs = ax4.contour(R, Z, psi, 10, linewidths=2)
ax4.plot(Rm, Zm, 'rx', linewidth=2, markersize=5)
ax4.set_xlabel('R')
ax4.set_ylabel('Z')
ax4.set_aspect('equal', adjustable='box')
ax4.set_title(f"R0={R0}, a={a}, k={k}, d={d}")

ax5 = fig.add_subplot(235, projection='3d')
ax5.plot_surface(R, Z, psi)
ax5.set_xlabel('R')
ax5.set_ylabel('Z')
ax5.set_zlabel(r'$\psi$')

ax6 = fig.add_subplot(236)
pcm = ax6.pcolormesh(R, Z, psi, shading='interp')
ax6.set_xlabel('R')
ax6.set_ylabel('Z')
ax6.set_aspect('equal', adjustable='box')
ax6.set_title('Run time: {}s'.format(time.process_time() - start_time))

plt.show()

